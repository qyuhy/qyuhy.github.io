<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[CI,CD流程（一）Docker+Gitlab+Jenkins持续集成]]></title>
    <url>%2F2018%2F04%2F25%2FCI-CD%E6%B5%81%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89Docker-Gitlab-Jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%2F</url>
    <content type="text"><![CDATA[CI,CD流程（一）Docker+Gitlab+Jenkins持续集成 记录下使用Docker+Gitlab+Jenkins的安装过程，以及所踩得坑。当然这个还是简单的一个持续集成，后续可能会使用docker服务编排的框架进行项目docker化，通过使用harbox，kubernetes可以构建一个完成的CI，CD流程 一个简单的持续集成的方案 下面将按照上述的图来一步步搭建环境 一、安装1.docker安装我使用的是mac版本，下载docker-for-mac,鉴于大家的网路环境，我上传到了百度云，mac安装很简单，直接拖到app中即可。 官网下载地址 https://store.docker.com/editions/community/docker-ce-desktop-mac 百度云下载地址 链接:https://pan.baidu.com/s/1EYghHptrLtXEBsMRFNGmVQ 密码:dxl2 注意，docker安装之后，知道几个常用的国内镜像还是有必要的 docker镜像地址 网易镜像中心https://c.163.com/ dao-cloudhttps://dashboard.daocloud.io/packages/explore 访问这些镜像中心，都需要注册登录才可以使用 使用docker安装Gitlab使用docker安装gitlab就很简单了，之前在centos6.5上手动安装过gitlab，感觉超级麻烦，现在只需要简单的几步即可。 拉取gitlab镜像1docker pull gitlab 启动gitlab最好把下列命令保存为一个shell脚本，先做好初始化工作，在宿主机上建立gitlab数据挂载目录，方便gitlab的版本更换123mkdir configmkdir logsmkdir data 启动gitlab12345678910docker stop gitlabdocker run --detach \ --hostname 127.0.0.1 \ --publish 5551:443 --publish 5555:80 --publish 22:22 \ --name gitlab \ --restart always \ --volume `pwd`/config:/etc/gitlab \ --volume `pwd`/logs:/var/log/gitlab \ --volume `pwd`/data:/var/opt/gitlab \ gitlab/gitlab-ce:latest *–rm 代表容器停止后删除该镜像；使用docker ps -a查不到该容器的启动历史 –restart always docker会监听容器的状态，如果容器意外停止，docker会一直尝试重启，保证容器一直处在运行状态 –volume 主要是备份容器数据，假如向切换gitlab版本，只需要拉取特定版本的镜像，指定上述挂载的目录即可 使用docker安装Jenkins拉取jenkins镜像1docker pull jenkins 启动jenkins最好把下列命令保存为一个shell脚本,先做好初始化工作，在宿主机上建立jenkins数据挂载目录，方便jenkins升级1mkdir data 启动jenkins12docker stop jenkinsdocker run -d --rm --name jenkins -p 8080:8080 -p 50000:50000 -v `pwd`/data:/var/jenkins_home jenkins 二、基于docker进行gitlab与jenkins整合 思路是在gitlab中配置一个webhook，只要有人提交代码到gitlab，就远程远程触发jenkins任务 配置jenkins首先启动jenkins,配置一个pipeline任务 配置这个jenkins任务 身份验证令牌 这个随便填 远程触发的jenkins的url是:JENKINS_URL/job/test/build,这个地方得注意，由于我们是在docker中运行的jenkins，怎么拿到这个地址呢。我们讲个最简单的办法，使用命令进入到jenkins容器中，拿到jenkins的IP地址1docker exec -it jenkins bash 执行ipconfig命令拿到地址,有可能在容器中没有这个命令,可以使用如下如下命令拿到地址1cat /etc/hosts 如上得到jenkins的地址为172.18.0.2,那么gitlab中的远程地址为: http://172.18.0.2:8080/job/test/build?token=123456 配置gitlab登录到gitlab中，随便建一个仓库，找到如下配置项 配置webhook，触发gitlab远程构建，地址就是上述的http://172.18.0.2:8080/job/test/build?token=123456 gitlab与jenkins互联测试配置到此，可以模拟一个push请求，进行测试下配置是否成功 理想是美好的，现实是残酷的,最终得到的页面是这样 我是这样查排查问题的 时候用docker exec -it gitlab bash 登录到gitlab中，看gitlab容器能否连接到jenkins，gitlab容器中没有安装ping命令的，需要手动安装，安装之后，ping 172.18.0.2 也是能ping通的，那就排除了网络问题。 jenkins中有安全策略，需要配置安全策略，进行如下配置允许Allow anonymous read access权限，去除防止跨站点请求伪造配置 在gitlab中执行 1curl http://172.18.0.2:8080/job/test/build?token=123456 到jenkins中查看确实有任务列表，以为大功告成了，现实依然残酷，在gitlab中始终都是一个500 这怎么办，看gitlab日志,使用如下命令查看日志 1docker logs -f gitlab 看大如下：Requests to the local network are not allowed从字面上翻译是访问本地网络是不允许的；借助google大神，gitlab中要进行如下配置：至此，开发人员push代码到gitlab，可以自动触发jenkins构建任务了 三、gitlab与jenkins在docker中相互依赖互联解决方案上述中gitlab与jenkins互联最大的问题是，只要重启jenkins，地址就会变啊，那麻烦了，不可能在每一jenkins重启都要重新配置gitlab webhook吧。一种方案是使用docker的link方案，但是这种方案有个致命的问题，先看下这种改如何配置。 使用docker link配置gitlab与jenkins互联 首先启动jenkins 12docker stop jenkinsdocker run -d --rm --name jenkins --link jenkins -p 8080:8080 -p 50000:50000 -v `pwd`/data:/var/jenkins_home jenkins –link jenkins 给改容器起一个为jenkins的网络别名 启动gitlab 1234567891011docker stop gitlabdocker run --detach \ --link gitlab --hostname 127.0.0.1 \ --publish 5551:443 --publish 5555:80 --publish 22:22 \ --name gitlab \ --restart always \ --volume `pwd`/config:/etc/gitlab \ --volume `pwd`/logs:/var/log/gitlab \ --volume `pwd`/data:/var/opt/gitlab \ gitlab/gitlab-ce:latest –link gitlab 给改容器起一个为gitlab的网络别名 在gitlab webhook中配置如下地址http://**jenkins**:8080/job/test/build?token=123456 上述配置，有个最大的问题，如果我要在jenkins中配置拉取gitlab代码，那么又该如何指定gitlab的地址呢，使用http://**gitlab**吗？由于我们首先启动的是jenkins，gitlab还没启动，jenkins是感知不到gitlab的。 使用自定义网络配置gitlab与jenkins互联 首先创建自定义网络使用如下命令创建自定义网络,gitlab与jenkins要使用相同的网络 1docker network create mynet 启动jenkins命令 12docker stop jenkinsdocker run -d --rm --name jenkins -p 8080:8080 -p 50000:50000 --net=mynet --net-alias=jenkins -v `pwd`/data:/var/jenkins_home jenkins –net=mynet 使用创建的自定义网络mynet –net-alias=jenkins 给容器起一个为jenkins的网络别名 启动gitlab 12345678910111213docker stop gitlabdocker run --detach \--net=mynet \--net-alias=gitlab \--hostname my.gitlab.com \--publish 5551:443 --publish 5555:80 --publish 22:22 \--name gitlab \--restart always \--volume `pwd`/config:/etc/gitlab \--volume `pwd`/logs:/var/log/gitlab \--volume `pwd`/data:/var/opt/gitlab \--link jenkins:jenkins \gitlab/gitlab-ce:latest –net=mynet 使用创建的自定义网络mynet ，和gitlab该项配置要一致 –net-alias=gitlab 给容器起一个为gitlab的网络别名 在gitlab中引用jenkins的地址只需要使用http://**jenkins**:8080/job/test/build?token=123456 至此，gitlab与jenkins就可以分别没有顺序的启动，而且可以相互引用。 问题其实在docker中启动jenkins，本人觉得还是不脱，对于jenkins来说需要依赖许多插件，这些插件有的需要在本机安装相应的命令，这样有需要基于jenkins重新自定义jenkins镜像，这就不方便了；比如项目是用maven构建的，改jenkins镜像并没有安装maven命令，一种办法就是重新构建jenkins，一种就是把宿主机的maven命令挂docker中，如果插件很多，就很麻烦。其实，宿主机上安装jenkins也很简单，就一个war包，启动很简单。建议宿主机上安装jenkins。]]></content>
      <categories>
        <category>持续集成</category>
      </categories>
      <tags>
        <tag>CI</tag>
        <tag>CD</tag>
      </tags>
  </entry>
</search>
